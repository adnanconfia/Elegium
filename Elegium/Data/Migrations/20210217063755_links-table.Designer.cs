// <auto-generated />
using System;
using Elegium.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Elegium.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210217063755_links-table")]
    partial class linkstable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Elegium.Dtos.Chat.ConversationThreadsDto", b =>
                {
                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ThreadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnreadMsgs")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.ToTable("ConversationThreadsDto");
                });

            modelBuilder.Entity("Elegium.Models.Actor.Actors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeMax")
                        .HasColumnType("int");

                    b.Property<int>("AgeMin")
                        .HasColumnType("int");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnkleWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppearanceNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArmBedGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArmBedLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArmLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyHeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BraSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CalfGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChestGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DOB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DressSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ethnicity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EyeColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacialHair")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FootLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FootWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontFootWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontWaistLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GloveSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HairColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HairLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HairType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasPiercings")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTattoo")
                        .HasColumnType("bit");

                    b.Property<string>("HeadGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HipHeightFromWaist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HipSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerLengthOfLeg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inseam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHalal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKosher")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVeg")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_deleted")
                        .HasColumnType("bit");

                    b.Property<string>("KneeCircumference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KneeHeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Languages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeckGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeckToBreast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeckToFloor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeckToWaist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OuterLengthOfLeg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PantsSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("RealName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShirtSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShoeSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoulderLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Talent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThighGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnderChestGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Union")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpperArmGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VocalRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaistCircumference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WearsGlasses")
                        .HasColumnType("bit");

                    b.Property<bool>("WillCutHair")
                        .HasColumnType("bit");

                    b.Property<bool>("WillShave")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Elegium.Models.Agency.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City_State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProejectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProejectId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("Elegium.Models.AgencyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("AgencyContacts");
                });

            modelBuilder.Entity("Elegium.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AccessRight")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Favorite")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("Elegium.Models.Animals.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("Elegium.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("HasDeadline")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeExternal")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PinTop")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Elegium.Models.AnnouncementsAssignedTo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AnnouncementsAssignedTo");
                });

            modelBuilder.Entity("Elegium.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Trash")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Elegium.Models.Calendar.CalenderCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("CalenderCategories");
                });

            modelBuilder.Entity("Elegium.Models.Calendar.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<int?>("CalenderCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CalenderCategoryId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Elegium.Models.Calendar.EventsAdditionalViewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventsAdditionalViewers");
                });

            modelBuilder.Entity("Elegium.Models.Calendar.EventsAssignedTo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventsAssignedTo");
                });

            modelBuilder.Entity("Elegium.Models.Cameras.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("cameras");
                });

            modelBuilder.Entity("Elegium.Models.CharacterTalent.CharactersTalent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<int?>("CharId")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraId")
                        .HasColumnType("int");

                    b.Property<bool>("Is_CastFixed")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_Rejected")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("TalentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("CharId");

                    b.HasIndex("ExtraId");

                    b.HasIndex("TalentId");

                    b.ToTable("CharactersTalents");
                });

            modelBuilder.Entity("Elegium.Models.Characters.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("GroupOfCharacters")
                        .HasColumnType("bit");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<bool?>("Sugggestion")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("characters");
                });

            modelBuilder.Entity("Elegium.Models.Chat.ChatBoxes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ThreadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatBoxes");
                });

            modelBuilder.Entity("Elegium.Models.Chat.Connection", b =>
                {
                    b.Property<string>("ConnectionID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ConnectionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConnectionID");

                    b.HasIndex("UserId");

                    b.ToTable("Connection");
                });

            modelBuilder.Entity("Elegium.Models.Chat.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ThreadId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("ThreadId")
                        .IsUnique()
                        .HasFilter("[ThreadId] IS NOT NULL");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Elegium.Models.Chat.MessageFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedAtTicks")
                        .HasColumnType("bigint");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageFiles");
                });

            modelBuilder.Entity("Elegium.Models.Chat.Thread", b =>
                {
                    b.Property<Guid>("ThreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Thread");
                });

            modelBuilder.Entity("Elegium.Models.Chat.ThreadReadState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Delivered")
                        .HasColumnType("bit");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("ThreadReadState");
                });

            modelBuilder.Entity("Elegium.Models.Chat.ThreadUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("ThreadUsers");
                });

            modelBuilder.Entity("Elegium.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Elegium.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<int?>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CharId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocumentCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentFileId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraId")
                        .HasColumnType("int");

                    b.Property<string>("MarkupText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("SceneId")
                        .HasColumnType("int");

                    b.Property<int?>("TalentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("characterId")
                        .HasColumnType("int");

                    b.Property<int?>("talentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DocumentCategoryId");

                    b.HasIndex("DocumentFileId");

                    b.HasIndex("EventId");

                    b.HasIndex("ExtraId");

                    b.HasIndex("ProjectTaskId");

                    b.HasIndex("SceneId");

                    b.HasIndex("characterId");

                    b.HasIndex("talentsId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Elegium.Models.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");
                });

            modelBuilder.Entity("Elegium.Models.Construction.construction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Constructions");
                });

            modelBuilder.Entity("Elegium.Models.Costumes.Costume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraId")
                        .HasColumnType("int");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ExtraId");

                    b.ToTable("Costumes");
                });

            modelBuilder.Entity("Elegium.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Elegium.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("UsdDifference")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Elegium.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Elegium.Models.DocumentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentCategory");
                });

            modelBuilder.Entity("Elegium.Models.DocumentFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<int?>("AgencyID")
                        .HasColumnType("int");

                    b.Property<int?>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<int?>("CharId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreateAtTicks")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int?>("DocumentCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExtraId")
                        .HasColumnType("int");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectResourceId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("SceneId")
                        .HasColumnType("int");

                    b.Property<int?>("ShotId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("TalentId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFriendlySize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("AgencyID");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("CharId");

                    b.HasIndex("DocumentCategoryId");

                    b.HasIndex("EventId");

                    b.HasIndex("ExtraId");

                    b.HasIndex("ProjectResourceId");

                    b.HasIndex("ProjectTaskId");

                    b.HasIndex("SceneId");

                    b.HasIndex("ShotId");

                    b.HasIndex("TalentId");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentFiles");
                });

            modelBuilder.Entity("Elegium.Models.Documents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Elegium.Models.DraftContractFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreateAtTicks")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectCrewId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFriendlySize")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCrewId");

                    b.ToTable("DraftContractFiles");
                });

            modelBuilder.Entity("Elegium.Models.Dressing.dressing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("dressings");
                });

            modelBuilder.Entity("Elegium.Models.Environment.Environment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Evironment_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("environments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Evironment_Name = "DAY-INT"
                        },
                        new
                        {
                            Id = 2,
                            Evironment_Name = "DAY-EXT"
                        },
                        new
                        {
                            Id = 3,
                            Evironment_Name = "NIGHT-INT"
                        },
                        new
                        {
                            Id = 4,
                            Evironment_Name = "NIGHT-EXT"
                        });
                });

            modelBuilder.Entity("Elegium.Models.EquipmentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EquipmentCategoryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentCategoryTypeId");

                    b.ToTable("EquipmentCategory");
                });

            modelBuilder.Entity("Elegium.Models.EquipmentCategoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentCategoryType");
                });

            modelBuilder.Entity("Elegium.Models.ExternalUserContractFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreateAtTicks")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExternalUserId")
                        .HasColumnType("int");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFriendlySize")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUserId");

                    b.ToTable("ExternalUserContractFile");
                });

            modelBuilder.Entity("Elegium.Models.ExternalUserDraftFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreateAtTicks")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExternalUserId")
                        .HasColumnType("int");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFriendlySize")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUserId");

                    b.ToTable("ExternalUserDraftFile");
                });

            modelBuilder.Entity("Elegium.Models.ExternalUserFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreateAtTicks")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExternalUserId")
                        .HasColumnType("int");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFriendlySize")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUserId");

                    b.ToTable("ExternalUserFile");
                });

            modelBuilder.Entity("Elegium.Models.Extras.Extra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("GroupOfCharacters")
                        .HasColumnType("bit");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<bool?>("Sugggestion")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Extras");
                });

            modelBuilder.Entity("Elegium.Models.FileComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentFileId")
                        .HasColumnType("int");

                    b.Property<string>("MarkupText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DocumentFileId");

                    b.ToTable("FileComment");
                });

            modelBuilder.Entity("Elegium.Models.FileLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentFileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DocumentFileId");

                    b.ToTable("FileLink");
                });

            modelBuilder.Entity("Elegium.Models.FileTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentFilesId")
                        .HasColumnType("int");

                    b.Property<bool>("HasDeadline")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentFilesId");

                    b.HasIndex("UserId");

                    b.ToTable("FileTask");
                });

            modelBuilder.Entity("Elegium.Models.FileTaskAssignedTo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileTaskId");

                    b.ToTable("FileTaskAssignedTo");
                });

            modelBuilder.Entity("Elegium.Models.FileThumbnail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("FileThumbnails");
                });

            modelBuilder.Entity("Elegium.Models.FundingAndFP.FavoriteFundingAndFP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserFundingAndFPId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserFundingAndFPId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteFundingAndFPs");
                });

            modelBuilder.Entity("Elegium.Models.FundingAndFP.SavedFundingAndFP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserFundingAndFPId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserFundingAndFPId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedFundingAndFPs");
                });

            modelBuilder.Entity("Elegium.Models.FundingAndFP.UserFundingAndFP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("BudgetUpto")
                        .HasColumnType("real");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("Offer")
                        .HasColumnType("real");

                    b.Property<string>("OfferShare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductionTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupportDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProductionTypeId");

                    b.HasIndex("ProjectPhaseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFundingAndFP");
                });

            modelBuilder.Entity("Elegium.Models.FundingFPRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FundingOrFP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Offer")
                        .HasColumnType("int");

                    b.Property<string>("OfferOrLooking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SenderId");

                    b.ToTable("FundingFPRequests");
                });

            modelBuilder.Entity("Elegium.Models.Graphics.Graphic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Graphics");
                });

            modelBuilder.Entity("Elegium.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Elegium.Models.LanguageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LanguageLevels");
                });

            modelBuilder.Entity("Elegium.Models.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DocumentCategoryId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("Elegium.Models.Links.link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("TalentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("TalentId");

                    b.ToTable("link");
                });

            modelBuilder.Entity("Elegium.Models.Makeup.Makeup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ExtraId");

                    b.ToTable("Makeups");
                });

            modelBuilder.Entity("Elegium.Models.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AccessRight")
                        .HasColumnType("bit");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedAtTicks")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Favorite")
                        .HasColumnType("bit");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("Elegium.Models.MenuActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MenuActivity");
                });

            modelBuilder.Entity("Elegium.Models.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NotificationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("ReceipientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("ReceipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Elegium.Models.Notifications.NotificationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Template")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("NotificationType");
                });

            modelBuilder.Entity("Elegium.Models.Others.other", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Others");
                });

            modelBuilder.Entity("Elegium.Models.Overview.DashboardPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EffectAllowed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanelLabel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DashboardPanels");
                });

            modelBuilder.Entity("Elegium.Models.Overview.DashboardSelectedPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EffectAllowed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanelLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DashboardSelectedPanels");
                });

            modelBuilder.Entity("Elegium.Models.Overview.ProjectDashboardPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EffectAllowed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanelLabel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectDashboardPanels");
                });

            modelBuilder.Entity("Elegium.Models.Overview.ProjectDashboardSelectedPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EffectAllowed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanelLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectDashboardSelectedPanels");
                });

            modelBuilder.Entity("Elegium.Models.PaymentGateway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentGateway");
                });

            modelBuilder.Entity("Elegium.Models.Professionals.FavoriteProfessional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessionalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteProfessionals");
                });

            modelBuilder.Entity("Elegium.Models.Professionals.ProfessionalHireRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkingPositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WorkingPositionId");

                    b.ToTable("ProfessionalHireRequests");
                });

            modelBuilder.Entity("Elegium.Models.Professionals.ProfessionalHireRequestMediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedAtTicks")
                        .HasColumnType("bigint");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfessionalHireRequestId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalHireRequestId");

                    b.ToTable("ProfessionalHireRequestMediaFiles");
                });

            modelBuilder.Entity("Elegium.Models.Professionals.SavedProfessional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfessionalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedProfessionals");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ContractDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreateAtTicks")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectCrewId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFriendlySize")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCrewId");

                    b.ToTable("ContractDocuments");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ExternalUserContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExternalUserId")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUserId");

                    b.ToTable("ExternalUserContact");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ExternalUserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExternalUserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUserId");

                    b.HasIndex("GroupId");

                    b.ToTable("ExternalUserGroups");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ExternalUserUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExternalUserId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUserId");

                    b.HasIndex("UnitId");

                    b.ToTable("ExternalUserUnits");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ProjectCrew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActorDatabaseRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressBookRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnnouncementRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCalendarRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ContainsDealMemo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContainsLOI")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractSent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractSigned")
                        .HasColumnType("datetime2");

                    b.Property<string>("CostumeDatabaseRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateDeleteProjectsRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrewRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HideMember")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFromDiscovery")
                        .HasColumnType("bit");

                    b.Property<string>("LocationDatabaseRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProbItemDatabaseRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionCalendarRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfessionalHireRequestId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SeperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SettingsRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionsRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalHireRequestId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectCrews");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ProjectCrewGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectCrewId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProjectCrewId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectCrewGroups");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ProjectCrewPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectCrewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("ProjectCrewId");

                    b.ToTable("ProjectCrewPositions");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ProjectCrewUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectCrewId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCrewId");

                    b.HasIndex("UnitId");

                    b.ToTable("CrewUnits");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ProjectExternalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certificates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyCountryId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ContainsDealMemo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContainsLOI")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractSent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractSigned")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DrivingLicenseClasses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationTraining")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDrivingLicense")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHalal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKosher")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionDescription")
                        .HasColumnType("int");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserCountryId")
                        .HasColumnType("int");

                    b.Property<string>("UserPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserStreet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCountryId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserCountryId");

                    b.ToTable("ProjectExternalUsers");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ProjectUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectUnits");
                });

            modelBuilder.Entity("Elegium.Models.ProjectPartnerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SenderId");

                    b.ToTable("ProjectPartnerRequests");
                });

            modelBuilder.Entity("Elegium.Models.ProjectResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HireOrSale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OriginalResourceId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PurchaseOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OriginalResourceId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("SenderId");

                    b.ToTable("ProjectResources");
                });

            modelBuilder.Entity("Elegium.Models.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<int?>("CharId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentFilesId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraId")
                        .HasColumnType("int");

                    b.Property<bool>("HasDeadline")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("SceneId")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TalentID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("DocumentCategoryId");

                    b.HasIndex("DocumentFilesId");

                    b.HasIndex("EventId");

                    b.HasIndex("ExtraId");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SceneId");

                    b.HasIndex("TalentID");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("Elegium.Models.ProjectTaskAssignedTo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectTaskAssignedTo");
                });

            modelBuilder.Entity("Elegium.Models.ProjectUserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsInCrewList")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectUserGroups");
                });

            modelBuilder.Entity("Elegium.Models.Projects.FavoriteProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteProjects");
                });

            modelBuilder.Entity("Elegium.Models.Projects.FavoriteProjectPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteProjectPartners");
                });

            modelBuilder.Entity("Elegium.Models.Projects.FundersRequired", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderCol")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FundersRequired");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProductionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductionType");
                });

            modelBuilder.Entity("Elegium.Models.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("BackgroundImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("BgColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("BgOpacity")
                        .HasColumnType("float");

                    b.Property<bool>("CinematicMode")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("bit");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("GlassMode")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnBoardingCompleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OnBoardingPercentage")
                        .HasColumnType("int");

                    b.Property<string>("ProductionAspectRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("ProductionLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionRecordingMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectFunctions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VisibilityArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isVisible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProductionLanguageId");

                    b.HasIndex("ProductionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectDispute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DisputeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectDisputes");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectDisputeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnteryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectDisputeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectDisputeId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectDisputeDetails");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectFinancialParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BenefitsOffer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("FundersRequiredId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FundersRequiredId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OtherRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectManagementPhaseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectManagementPhaseId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FundersRequiredId1");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectManagementPhaseId1");

                    b.ToTable("ProjectFinancialParticipation");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectFinancialParticipationManagementPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectFinancialParticipationId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectManagementPhasesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectManagementPhasesId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFinancialParticipationId");

                    b.HasIndex("ProjectManagementPhasesId1");

                    b.ToTable("ProjectFinancialParticipationManagementPhase");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectFunding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BenefitsOffer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("FundersRequiredId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FundersRequiredId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectManagementPhaseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectManagementPhaseId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FundersRequiredId1");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectManagementPhaseId1");

                    b.ToTable("ProjectFunding");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectFundingManagementPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectFundingId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectManagementPhasesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectManagementPhasesId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFundingId");

                    b.HasIndex("ProjectManagementPhasesId1");

                    b.ToTable("ProjectFundingManagementPhase");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectManagementPhases", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectManagementPhase");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FinancialParticipationRequired")
                        .HasColumnType("bit");

                    b.Property<string>("FinancialShare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectPartnerRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerUserId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPartner");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectPartnerRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Budget")
                        .HasColumnType("int");

                    b.Property<bool>("NeedFinancialParticipation")
                        .HasColumnType("bit");

                    b.Property<bool>("PlotCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectManagementPhaseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectManagementPhaseId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProjectPartnersCount")
                        .HasColumnType("int");

                    b.Property<bool>("ScreenplayCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ScreenplayWorkRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("SynopsisCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("YourFinancialShare")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectManagementPhaseId1");

                    b.ToTable("ProjectPartnerRequirement");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectPartnerRequirementManagementPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProjectManagementPhasesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectManagementPhasesId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectPartnerRequirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectManagementPhasesId1");

                    b.HasIndex("ProjectPartnerRequirementId");

                    b.ToTable("ProjectPartnerRequirementManagementPhase");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectVisibilityArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("VisibilityAreaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VisibilityAreaId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("VisibilityAreaId1");

                    b.ToTable("ProjectVisibilityArea");
                });

            modelBuilder.Entity("Elegium.Models.Projects.SavedProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedProjects");
                });

            modelBuilder.Entity("Elegium.Models.Projects.SavedProjectPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedProjectPartners");
                });

            modelBuilder.Entity("Elegium.Models.Projects.VisibilityAreas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VisibilityAreas");
                });

            modelBuilder.Entity("Elegium.Models.PromotionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PromotionCategory");
                });

            modelBuilder.Entity("Elegium.Models.Props.Props", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Props");
                });

            modelBuilder.Entity("Elegium.Models.Resources.FavoriteResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteResource");
                });

            modelBuilder.Entity("Elegium.Models.Resources.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConditionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("HireOrSale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Insured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEquipment")
                        .HasColumnType("bit");

                    b.Property<string>("LendingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxRentalPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("MinRentalPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RentalPrice")
                        .HasColumnType("int");

                    b.Property<string>("RentalTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalePrice")
                        .HasColumnType("int");

                    b.Property<bool>("Sold")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VimeoVideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeVideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EquipmentCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("Elegium.Models.Resources.ResourceCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResourceCondition");
                });

            modelBuilder.Entity("Elegium.Models.Resources.ResourceMediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedAtTicks")
                        .HasColumnType("bigint");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceMediaFile");
                });

            modelBuilder.Entity("Elegium.Models.Resources.SavedResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedResource");
                });

            modelBuilder.Entity("Elegium.Models.SceneAnimals.SceneAnimal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("SceneId");

                    b.ToTable("sceneAnimals");
                });

            modelBuilder.Entity("Elegium.Models.SceneCameras.SceneCamera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CameraId")
                        .HasColumnType("int");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("SceneId");

                    b.ToTable("sceneCameras");
                });

            modelBuilder.Entity("Elegium.Models.SceneCharacters.SceneCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SceneId");

                    b.ToTable("sceneCharacters");
                });

            modelBuilder.Entity("Elegium.Models.SceneConstruction.SceneConstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConstructionId")
                        .HasColumnType("int");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("SceneId");

                    b.ToTable("sceneConstructions");
                });

            modelBuilder.Entity("Elegium.Models.SceneCostumes.SceneCostumes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("CostumeId")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CostumeId");

                    b.HasIndex("ExtraId");

                    b.HasIndex("SceneId");

                    b.ToTable("SceneCostumes");
                });

            modelBuilder.Entity("Elegium.Models.SceneDressings.SceneDressing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DressingId")
                        .HasColumnType("int");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DressingId");

                    b.HasIndex("SceneId");

                    b.ToTable("sceneDressings");
                });

            modelBuilder.Entity("Elegium.Models.SceneGraphics.SceneGraphic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GraphicId")
                        .HasColumnType("int");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GraphicId");

                    b.HasIndex("SceneId");

                    b.ToTable("sceneGraphics");
                });

            modelBuilder.Entity("Elegium.Models.SceneMakeups.SceneMakeup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraId")
                        .HasColumnType("int");

                    b.Property<int>("MakeupId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ExtraId");

                    b.HasIndex("MakeupId");

                    b.HasIndex("SceneId");

                    b.ToTable("sceneMakeups");
                });

            modelBuilder.Entity("Elegium.Models.SceneOthers.SceneOther", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OtherId")
                        .HasColumnType("int");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OtherId");

                    b.HasIndex("SceneId");

                    b.ToTable("sceneOthers");
                });

            modelBuilder.Entity("Elegium.Models.SceneProps.SceneProps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PropsId")
                        .HasColumnType("int");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropsId");

                    b.HasIndex("SceneId");

                    b.ToTable("sceneProps");
                });

            modelBuilder.Entity("Elegium.Models.SceneSounds.SceneSound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.Property<int>("SoundId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.HasIndex("SoundId");

                    b.ToTable("sceneSounds");
                });

            modelBuilder.Entity("Elegium.Models.SceneSpecials.SceneSpecial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.HasIndex("SpecialId");

                    b.ToTable("sceneSpecials");
                });

            modelBuilder.Entity("Elegium.Models.SceneStunts.SceneStunt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.Property<int>("StuntId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.HasIndex("StuntId");

                    b.ToTable("sceneStunts");
                });

            modelBuilder.Entity("Elegium.Models.SceneVehicle.SceneVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.HasIndex("VehicleId");

                    b.ToTable("sceneVehicles");
                });

            modelBuilder.Entity("Elegium.Models.SceneVisuals.SceneVisual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.Property<int>("VisualId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.HasIndex("VisualId");

                    b.ToTable("sceneVisuals");
                });

            modelBuilder.Entity("Elegium.Models.ScenesExtra.ScenesExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtraId");

                    b.HasIndex("SceneId");

                    b.ToTable("scenesExtras");
                });

            modelBuilder.Entity("Elegium.Models.ScenesandScript.Scene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CastType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommnityInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Estime_mm")
                        .HasColumnType("int");

                    b.Property<int>("Estime_ss")
                        .HasColumnType("int");

                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOmitted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfShots")
                        .HasColumnType("int");

                    b.Property<int>("ScriptDay")
                        .HasColumnType("int");

                    b.Property<int>("ScriptPage")
                        .HasColumnType("int");

                    b.Property<string>("ScriptPages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("environment_id")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("point_in_time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("project_id")
                        .HasColumnType("int");

                    b.Property<int>("scheduled_hh")
                        .HasColumnType("int");

                    b.Property<int>("scheduled_mm")
                        .HasColumnType("int");

                    b.Property<int?>("setId")
                        .HasColumnType("int");

                    b.Property<int?>("unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("project_id");

                    b.HasIndex("unit");

                    b.ToTable("Scenes");
                });

            modelBuilder.Entity("Elegium.Models.Set.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Set_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("sets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Set_name = "Ships Ramses / Deck"
                        },
                        new
                        {
                            Id = 2,
                            Set_name = "Ship Ramses / Foredeck"
                        },
                        new
                        {
                            Id = 3,
                            Set_name = "Ship Ramses / Dining Hall"
                        },
                        new
                        {
                            Id = 4,
                            Set_name = "Ship Ramses / Fahra’s Cabin"
                        });
                });

            modelBuilder.Entity("Elegium.Models.Shots.Shot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Audio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lighting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.Property<int>("Schedule_hh")
                        .HasColumnType("int");

                    b.Property<int>("Schedule_mm")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sound")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("Visual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.HasIndex("UnitId");

                    b.ToTable("Shots");
                });

            modelBuilder.Entity("Elegium.Models.Shots.ShotDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShotId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShotId");

                    b.ToTable("ShotDetails");
                });

            modelBuilder.Entity("Elegium.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("Elegium.Models.SkillLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SkillLevel");
                });

            modelBuilder.Entity("Elegium.Models.Sounds.Sound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Sounds");
                });

            modelBuilder.Entity("Elegium.Models.SpecialEffects.SpecialEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("specialEffects");
                });

            modelBuilder.Entity("Elegium.Models.Stunts.Stunt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("stunts");
                });

            modelBuilder.Entity("Elegium.Models.Talents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeMax")
                        .HasColumnType("int");

                    b.Property<int>("AgeMin")
                        .HasColumnType("int");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnkleWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppearanceNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArmBedGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArmBedLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArmLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyHeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BraSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CalfGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChestGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DressSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ethnicity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EyeColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacialHair")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FootLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FootWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontFootWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontWaistLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GloveSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HairColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HairLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HairType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasPiercings")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTattoo")
                        .HasColumnType("bit");

                    b.Property<string>("HeadGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HipHeightFromWaist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HipSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerLengthOfLeg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inseam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHalal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKosher")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVeg")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_deleted")
                        .HasColumnType("bit");

                    b.Property<string>("KneeCircumference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KneeHeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Languages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeckGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeckToBreast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeckToFloor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeckToWaist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OuterLengthOfLeg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PantsSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SecondCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShirtSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShoeSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoulderLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Talent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThighGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnderChestGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpperArmGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VocalRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaistCircumference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WearsGlasses")
                        .HasColumnType("bit");

                    b.Property<bool>("WillCutHair")
                        .HasColumnType("bit");

                    b.Property<bool>("WillShave")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Talents");
                });

            modelBuilder.Entity("Elegium.Models.UserAdditionalSkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAdditionalSkills");
                });

            modelBuilder.Entity("Elegium.Models.UserCredit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Workplace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCredit");
                });

            modelBuilder.Entity("Elegium.Models.UserEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EquipmentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LendingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEquipment");
                });

            modelBuilder.Entity("Elegium.Models.UserFollowing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FollowingToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FollowingToId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFollowing");
                });

            modelBuilder.Entity("Elegium.Models.UserMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("Elegium.Models.UserOtherLanguages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOtherLanguages");
                });

            modelBuilder.Entity("Elegium.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("BackgroundImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("BgColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("BgOpacity")
                        .HasColumnType("float");

                    b.Property<string>("Build")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CinematicMode")
                        .HasColumnType("bit");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyCityId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyCountryId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CompanyLegalRepresent")
                        .HasColumnType("bit");

                    b.Property<byte[]>("CompanyLogo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyPositionId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyPostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyStreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyStreetAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyStudioAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyStudioAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyStudioCityId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyStudioCountryId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyStudioEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyStudioPostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyStudioState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyStudioWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EnglishLevelId")
                        .HasColumnType("int");

                    b.Property<string>("EyeColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FacebookLinkIsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GlassMode")
                        .HasColumnType("bit");

                    b.Property<string>("HairColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImdbLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ImdbLinkIsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("InstagramLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InstagramLinkIsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("IntroText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedinLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LinkedinLinkIsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnCompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnCompanyTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PinterestLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PinterestLinkIsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromotionCategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("SkillLevelId")
                        .HasColumnType("int");

                    b.Property<string>("SkinColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwitterLinkIsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VimeoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VimeoLinkIsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("YoutubeLinkIsPublic")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyCityId");

                    b.HasIndex("CompanyCountryId");

                    b.HasIndex("CompanyPositionId");

                    b.HasIndex("CompanyStudioCityId");

                    b.HasIndex("CompanyStudioCountryId");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EnglishLevelId");

                    b.HasIndex("OwnCompanyTypeId");

                    b.HasIndex("SkillId");

                    b.HasIndex("SkillLevelId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Elegium.Models.UserProjectMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MenuActivityId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MenuActivityId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserProjectMenu");
                });

            modelBuilder.Entity("Elegium.Models.UserPromotionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PromotionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PromotionCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPromotionCategory");
                });

            modelBuilder.Entity("Elegium.Models.Vehicle.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("vehicles");
                });

            modelBuilder.Entity("Elegium.Models.VersionFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreateAtTicks")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentFileId")
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFriendlySize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentFileId");

                    b.HasIndex("UserId");

                    b.ToTable("VersionFiles");
                });

            modelBuilder.Entity("Elegium.Models.VisualEffects.VisualEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("visualEffects");
                });

            modelBuilder.Entity("Elegium.Models.Voting.FinalVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NominationDetailId")
                        .HasColumnType("int");

                    b.Property<float>("TotalScore")
                        .HasColumnType("real");

                    b.Property<string>("UserVotedId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NominationDetailId");

                    b.HasIndex("UserVotedId");

                    b.ToTable("FinalVotes");
                });

            modelBuilder.Entity("Elegium.Models.Voting.FinalVoteDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinalVoteId")
                        .HasColumnType("int");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int>("VotingParameterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinalVoteId");

                    b.HasIndex("VotingParameterId");

                    b.ToTable("FinalVoteDetails");
                });

            modelBuilder.Entity("Elegium.Models.Voting.Nomination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsResultApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVotingFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVotingStarted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("ProductionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ResultsApprovalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TermsAndConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VotingFinishDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VotingStartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProductionTypeId");

                    b.ToTable("Nominations");
                });

            modelBuilder.Entity("Elegium.Models.Voting.NominationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSelectedForFinalVoting")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemSuggested")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("bit");

                    b.Property<int>("NominationId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NominationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("NominationDetails");
                });

            modelBuilder.Entity("Elegium.Models.Voting.NominationVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NominationDetailId")
                        .HasColumnType("int");

                    b.Property<float>("TotalScore")
                        .HasColumnType("real");

                    b.Property<string>("UserVotedId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NominationDetailId");

                    b.HasIndex("UserVotedId");

                    b.ToTable("NominationVotes");
                });

            modelBuilder.Entity("Elegium.Models.Voting.NominationVoteDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NominationVoteId")
                        .HasColumnType("int");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int>("VotingParameterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NominationVoteId");

                    b.HasIndex("VotingParameterId");

                    b.ToTable("NominationVoteDetails");
                });

            modelBuilder.Entity("Elegium.Models.Voting.VotingParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float>("MaxScore")
                        .HasColumnType("real");

                    b.Property<float>("MinScore")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VotingParameters");
                });

            modelBuilder.Entity("Elegium.Models.Voting.VotingSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SettingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VotingSettings");
                });

            modelBuilder.Entity("Elegium.Models.WorkingPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkingPositions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Elegium.Models.Actor.Actors", b =>
                {
                    b.HasOne("Elegium.Models.Agency.Agency", "agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Elegium.Models.Agency.Agency", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProejectId");
                });

            modelBuilder.Entity("Elegium.Models.AgencyContact", b =>
                {
                    b.HasOne("Elegium.Models.Agency.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");
                });

            modelBuilder.Entity("Elegium.Models.Album", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Animals.Animal", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Elegium.Models.Announcement", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.AnnouncementsAssignedTo", b =>
                {
                    b.HasOne("Elegium.Models.Announcement", "Announcement")
                        .WithMany()
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.Calendar.CalenderCategory", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Calendar.Event", b =>
                {
                    b.HasOne("Elegium.Models.Calendar.CalenderCategory", "CalenderCategory")
                        .WithMany()
                        .HasForeignKey("CalenderCategoryId");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Calendar.EventsAdditionalViewer", b =>
                {
                    b.HasOne("Elegium.Models.Calendar.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.Calendar.EventsAssignedTo", b =>
                {
                    b.HasOne("Elegium.Models.Calendar.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.Cameras.Camera", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Elegium.Models.CharacterTalent.CharactersTalent", b =>
                {
                    b.HasOne("Elegium.Models.Actor.Actors", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId");

                    b.HasOne("Elegium.Models.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharId");

                    b.HasOne("Elegium.Models.Extras.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId");

                    b.HasOne("Elegium.Models.Talents", "Talent")
                        .WithMany()
                        .HasForeignKey("TalentId");
                });

            modelBuilder.Entity("Elegium.Models.Chat.ChatBoxes", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("Elegium.Models.Chat.Thread", "Thread")
                        .WithMany()
                        .HasForeignKey("ThreadId");

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Chat.Connection", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany("Connections")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Chat.Message", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.HasOne("Elegium.Models.Chat.Thread", "Thread")
                        .WithOne("LastMessage")
                        .HasForeignKey("Elegium.Models.Chat.Message", "ThreadId");
                });

            modelBuilder.Entity("Elegium.Models.Chat.MessageFiles", b =>
                {
                    b.HasOne("Elegium.Models.Chat.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.Chat.Thread", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Chat.ThreadReadState", b =>
                {
                    b.HasOne("Elegium.Models.Chat.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Chat.ThreadUsers", b =>
                {
                    b.HasOne("Elegium.Models.Chat.Thread", "Thread")
                        .WithMany()
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.City", b =>
                {
                    b.HasOne("Elegium.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.Comment", b =>
                {
                    b.HasOne("Elegium.Models.Actor.Actors", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId");

                    b.HasOne("Elegium.Models.Announcement", "Announcement")
                        .WithMany()
                        .HasForeignKey("AnnouncementId");

                    b.HasOne("Elegium.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Elegium.Models.DocumentCategory", "DocumentCategory")
                        .WithMany()
                        .HasForeignKey("DocumentCategoryId");

                    b.HasOne("Elegium.Models.DocumentFiles", "DocumentFile")
                        .WithMany()
                        .HasForeignKey("DocumentFileId");

                    b.HasOne("Elegium.Models.Calendar.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("Elegium.Models.Extras.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId");

                    b.HasOne("Elegium.Models.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskId");

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "scene")
                        .WithMany()
                        .HasForeignKey("SceneId");

                    b.HasOne("Elegium.Models.Characters.Character", "character")
                        .WithMany()
                        .HasForeignKey("characterId");

                    b.HasOne("Elegium.Models.Talents", "talents")
                        .WithMany()
                        .HasForeignKey("talentsId");
                });

            modelBuilder.Entity("Elegium.Models.Costumes.Costume", b =>
                {
                    b.HasOne("Elegium.Models.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId");

                    b.HasOne("Elegium.Models.Extras.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId");
                });

            modelBuilder.Entity("Elegium.Models.DocumentCategory", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Elegium.Models.Documents", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.DocumentFiles", b =>
                {
                    b.HasOne("Elegium.Models.Actor.Actors", "Actors")
                        .WithMany()
                        .HasForeignKey("ActorId");

                    b.HasOne("Elegium.Models.Agency.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID");

                    b.HasOne("Elegium.Models.Announcement", "Announcement")
                        .WithMany()
                        .HasForeignKey("AnnouncementId");

                    b.HasOne("Elegium.Models.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharId");

                    b.HasOne("Elegium.Models.DocumentCategory", "DocumentCategory")
                        .WithMany()
                        .HasForeignKey("DocumentCategoryId");

                    b.HasOne("Elegium.Models.Calendar.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("Elegium.Models.Extras.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId");

                    b.HasOne("Elegium.Models.ProjectResource", "ProjectResource")
                        .WithMany()
                        .HasForeignKey("ProjectResourceId");

                    b.HasOne("Elegium.Models.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskId");

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId");

                    b.HasOne("Elegium.Models.Shots.Shot", "Shot")
                        .WithMany()
                        .HasForeignKey("ShotId");

                    b.HasOne("Elegium.Models.Talents", "Talents")
                        .WithMany()
                        .HasForeignKey("TalentId");

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Documents", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.DraftContractFile", b =>
                {
                    b.HasOne("Elegium.Models.ProjectCrews.ProjectCrew", "ProjectCrew")
                        .WithMany()
                        .HasForeignKey("ProjectCrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.EquipmentCategory", b =>
                {
                    b.HasOne("Elegium.Models.EquipmentCategoryType", "EquipmentCategoryType")
                        .WithMany()
                        .HasForeignKey("EquipmentCategoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.ExternalUserContractFile", b =>
                {
                    b.HasOne("Elegium.Models.ProjectCrews.ProjectExternalUser", "ExternalUser")
                        .WithMany()
                        .HasForeignKey("ExternalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.ExternalUserDraftFile", b =>
                {
                    b.HasOne("Elegium.Models.ProjectCrews.ProjectExternalUser", "ExternalUser")
                        .WithMany()
                        .HasForeignKey("ExternalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.ExternalUserFile", b =>
                {
                    b.HasOne("Elegium.Models.ProjectCrews.ProjectExternalUser", "ExternalUser")
                        .WithMany()
                        .HasForeignKey("ExternalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.FileComment", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Elegium.Models.DocumentFiles", "DocumentFile")
                        .WithMany()
                        .HasForeignKey("DocumentFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.FileLink", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Elegium.Models.DocumentFiles", "DocumentFile")
                        .WithMany()
                        .HasForeignKey("DocumentFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.FileTask", b =>
                {
                    b.HasOne("Elegium.Models.DocumentFiles", "DocumentFiles")
                        .WithMany()
                        .HasForeignKey("DocumentFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.FileTaskAssignedTo", b =>
                {
                    b.HasOne("Elegium.Models.FileTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("FileTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.FundingAndFP.FavoriteFundingAndFP", b =>
                {
                    b.HasOne("Elegium.Models.FundingAndFP.UserFundingAndFP", "UserFundingAndFP")
                        .WithMany()
                        .HasForeignKey("UserFundingAndFPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.FundingAndFP.SavedFundingAndFP", b =>
                {
                    b.HasOne("Elegium.Models.FundingAndFP.UserFundingAndFP", "UserFundingAndFP")
                        .WithMany()
                        .HasForeignKey("UserFundingAndFPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.FundingAndFP.UserFundingAndFP", b =>
                {
                    b.HasOne("Elegium.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Elegium.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Elegium.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Elegium.Models.Projects.ProductionType", "ProductionType")
                        .WithMany()
                        .HasForeignKey("ProductionTypeId");

                    b.HasOne("Elegium.Models.Projects.ProjectManagementPhases", "ProjectPhase")
                        .WithMany()
                        .HasForeignKey("ProjectPhaseId");

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.FundingFPRequests", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Elegium.Models.Graphics.Graphic", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Elegium.Models.Link", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Elegium.Models.DocumentCategory", "DocumentCategory")
                        .WithMany()
                        .HasForeignKey("DocumentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.Links.link", b =>
                {
                    b.HasOne("Elegium.Models.Actor.Actors", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId");

                    b.HasOne("Elegium.Models.Talents", "Talent")
                        .WithMany()
                        .HasForeignKey("TalentId");
                });

            modelBuilder.Entity("Elegium.Models.Makeup.Makeup", b =>
                {
                    b.HasOne("Elegium.Models.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId");

                    b.HasOne("Elegium.Models.Extras.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId");
                });

            modelBuilder.Entity("Elegium.Models.MediaFile", b =>
                {
                    b.HasOne("Elegium.Models.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId");

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Notifications.Notification", b =>
                {
                    b.HasOne("Elegium.Models.Notifications.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "Receipient")
                        .WithMany()
                        .HasForeignKey("ReceipientId");

                    b.HasOne("Elegium.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Elegium.Models.Notifications.NotificationType", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Elegium.Models.Others.other", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Elegium.Models.Overview.DashboardSelectedPanel", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Overview.ProjectDashboardSelectedPanel", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Professionals.FavoriteProfessional", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId");

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Professionals.ProfessionalHireRequest", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.WorkingPosition", "WorkingPosition")
                        .WithMany()
                        .HasForeignKey("WorkingPositionId");
                });

            modelBuilder.Entity("Elegium.Models.Professionals.ProfessionalHireRequestMediaFile", b =>
                {
                    b.HasOne("Elegium.Models.Professionals.ProfessionalHireRequest", "ProfessionalHireRequest")
                        .WithMany()
                        .HasForeignKey("ProfessionalHireRequestId");
                });

            modelBuilder.Entity("Elegium.Models.Professionals.SavedProfessional", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId");

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ContractDocument", b =>
                {
                    b.HasOne("Elegium.Models.ProjectCrews.ProjectCrew", "ProjectCrew")
                        .WithMany()
                        .HasForeignKey("ProjectCrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ExternalUserContact", b =>
                {
                    b.HasOne("Elegium.Models.ProjectCrews.ProjectExternalUser", "ExternalUser")
                        .WithMany()
                        .HasForeignKey("ExternalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ExternalUserGroup", b =>
                {
                    b.HasOne("Elegium.Models.ProjectCrews.ProjectExternalUser", "ExternalUser")
                        .WithMany()
                        .HasForeignKey("ExternalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ProjectUserGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ExternalUserUnit", b =>
                {
                    b.HasOne("Elegium.Models.ProjectCrews.ProjectExternalUser", "ExternalUser")
                        .WithMany()
                        .HasForeignKey("ExternalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ProjectCrews.ProjectUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ProjectCrew", b =>
                {
                    b.HasOne("Elegium.Models.Professionals.ProfessionalHireRequest", "ProfessionalHireRequest")
                        .WithMany()
                        .HasForeignKey("ProfessionalHireRequestId");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ProjectCrewGroup", b =>
                {
                    b.HasOne("Elegium.Models.ProjectUserGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ProjectCrews.ProjectCrew", "ProjectCrew")
                        .WithMany()
                        .HasForeignKey("ProjectCrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ProjectCrewPosition", b =>
                {
                    b.HasOne("Elegium.Models.WorkingPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("Elegium.Models.ProjectCrews.ProjectCrew", "ProjectCrew")
                        .WithMany()
                        .HasForeignKey("ProjectCrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ProjectCrewUnit", b =>
                {
                    b.HasOne("Elegium.Models.ProjectCrews.ProjectCrew", "ProjectCrew")
                        .WithMany()
                        .HasForeignKey("ProjectCrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ProjectCrews.ProjectUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ProjectExternalUser", b =>
                {
                    b.HasOne("Elegium.Models.Country", "CompanyCountry")
                        .WithMany()
                        .HasForeignKey("CompanyCountryId");

                    b.HasOne("Elegium.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Elegium.Models.WorkingPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Country", "UserCountry")
                        .WithMany()
                        .HasForeignKey("UserCountryId");
                });

            modelBuilder.Entity("Elegium.Models.ProjectCrews.ProjectUnit", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Elegium.Models.ProjectPartnerRequest", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Elegium.Models.ProjectResource", b =>
                {
                    b.HasOne("Elegium.Models.Resources.Resource", "OriginalResource")
                        .WithMany()
                        .HasForeignKey("OriginalResourceId");

                    b.HasOne("Elegium.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Elegium.Models.Resources.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId");

                    b.HasOne("Elegium.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Elegium.Models.ProjectTask", b =>
                {
                    b.HasOne("Elegium.Models.Actor.Actors", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId");

                    b.HasOne("Elegium.Models.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId");

                    b.HasOne("Elegium.Models.DocumentCategory", "DocumentCategory")
                        .WithMany()
                        .HasForeignKey("DocumentCategoryId");

                    b.HasOne("Elegium.Models.DocumentFiles", "DocumentFiles")
                        .WithMany()
                        .HasForeignKey("DocumentFilesId");

                    b.HasOne("Elegium.Models.Calendar.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("Elegium.Models.Extras.Extra", "extra")
                        .WithMany()
                        .HasForeignKey("ExtraId");

                    b.HasOne("Elegium.Models.ProjectTask", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "scene")
                        .WithMany()
                        .HasForeignKey("SceneId");

                    b.HasOne("Elegium.Models.Talents", "Talent")
                        .WithMany()
                        .HasForeignKey("TalentID");

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.ProjectTaskAssignedTo", b =>
                {
                    b.HasOne("Elegium.Models.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.ProjectUserGroup", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.Projects.FavoriteProject", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Projects.FavoriteProjectPartner", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Projects.Project", b =>
                {
                    b.HasOne("Elegium.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Language", "ProductionLanguage")
                        .WithMany()
                        .HasForeignKey("ProductionLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Projects.ProductionType", "ProductionType")
                        .WithMany()
                        .HasForeignKey("ProductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectDispute", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectDisputeDetail", b =>
                {
                    b.HasOne("Elegium.Models.Projects.ProjectDispute", "ProjectDispute")
                        .WithMany()
                        .HasForeignKey("ProjectDisputeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectFinancialParticipation", b =>
                {
                    b.HasOne("Elegium.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Elegium.Models.Projects.FundersRequired", "FundersRequired")
                        .WithMany()
                        .HasForeignKey("FundersRequiredId1");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Projects.ProjectManagementPhases", "ProjectManagementPhase")
                        .WithMany()
                        .HasForeignKey("ProjectManagementPhaseId1");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectFinancialParticipationManagementPhase", b =>
                {
                    b.HasOne("Elegium.Models.Projects.ProjectFinancialParticipation", "ProjectFinancialParticipation")
                        .WithMany()
                        .HasForeignKey("ProjectFinancialParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Projects.ProjectManagementPhases", "ProjectManagementPhases")
                        .WithMany()
                        .HasForeignKey("ProjectManagementPhasesId1");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectFunding", b =>
                {
                    b.HasOne("Elegium.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Elegium.Models.Projects.FundersRequired", "FundersRequired")
                        .WithMany()
                        .HasForeignKey("FundersRequiredId1");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Projects.ProjectManagementPhases", "ProjectManagementPhase")
                        .WithMany()
                        .HasForeignKey("ProjectManagementPhaseId1");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectFundingManagementPhase", b =>
                {
                    b.HasOne("Elegium.Models.Projects.ProjectFunding", "ProjectFunding")
                        .WithMany()
                        .HasForeignKey("ProjectFundingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Projects.ProjectManagementPhases", "ProjectManagementPhases")
                        .WithMany()
                        .HasForeignKey("ProjectManagementPhasesId1");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectPartner", b =>
                {
                    b.HasOne("Elegium.Models.UserProfile", "PartnerUser")
                        .WithMany()
                        .HasForeignKey("PartnerUserId");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectPartnerRequirement", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Projects.ProjectManagementPhases", "ProjectManagementPhase")
                        .WithMany()
                        .HasForeignKey("ProjectManagementPhaseId1");
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectPartnerRequirementManagementPhase", b =>
                {
                    b.HasOne("Elegium.Models.Projects.ProjectManagementPhases", "ProjectManagementPhases")
                        .WithMany()
                        .HasForeignKey("ProjectManagementPhasesId1");

                    b.HasOne("Elegium.Models.Projects.ProjectPartnerRequirement", "ProjectPartnerRequirement")
                        .WithMany()
                        .HasForeignKey("ProjectPartnerRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.Projects.ProjectVisibilityArea", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Projects.VisibilityAreas", "VisibilityArea")
                        .WithMany()
                        .HasForeignKey("VisibilityAreaId1");
                });

            modelBuilder.Entity("Elegium.Models.Projects.SavedProject", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Projects.SavedProjectPartner", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Props.Props", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Elegium.Models.Resources.FavoriteResource", b =>
                {
                    b.HasOne("Elegium.Models.Resources.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Resources.Resource", b =>
                {
                    b.HasOne("Elegium.Models.Resources.ResourceCondition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId");

                    b.HasOne("Elegium.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.EquipmentCategory", "EquipmentCategory")
                        .WithMany()
                        .HasForeignKey("EquipmentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Resources.ResourceMediaFile", b =>
                {
                    b.HasOne("Elegium.Models.Resources.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId");
                });

            modelBuilder.Entity("Elegium.Models.Resources.SavedResource", b =>
                {
                    b.HasOne("Elegium.Models.Resources.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.SceneAnimals.SceneAnimal", b =>
                {
                    b.HasOne("Elegium.Models.Animals.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneCameras.SceneCamera", b =>
                {
                    b.HasOne("Elegium.Models.Cameras.Camera", "Camera")
                        .WithMany()
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneCharacters.SceneCharacter", b =>
                {
                    b.HasOne("Elegium.Models.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneConstruction.SceneConstruction", b =>
                {
                    b.HasOne("Elegium.Models.Construction.construction", "Construction")
                        .WithMany()
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneCostumes.SceneCostumes", b =>
                {
                    b.HasOne("Elegium.Models.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId");

                    b.HasOne("Elegium.Models.Costumes.Costume", "Costumes")
                        .WithMany()
                        .HasForeignKey("CostumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Extras.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId");

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneDressings.SceneDressing", b =>
                {
                    b.HasOne("Elegium.Models.Dressing.dressing", "Dressing")
                        .WithMany()
                        .HasForeignKey("DressingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneGraphics.SceneGraphic", b =>
                {
                    b.HasOne("Elegium.Models.Graphics.Graphic", "Graphics")
                        .WithMany()
                        .HasForeignKey("GraphicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneMakeups.SceneMakeup", b =>
                {
                    b.HasOne("Elegium.Models.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId");

                    b.HasOne("Elegium.Models.Extras.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId");

                    b.HasOne("Elegium.Models.Makeup.Makeup", "Makeup")
                        .WithMany()
                        .HasForeignKey("MakeupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneOthers.SceneOther", b =>
                {
                    b.HasOne("Elegium.Models.Others.other", "Other")
                        .WithMany()
                        .HasForeignKey("OtherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneProps.SceneProps", b =>
                {
                    b.HasOne("Elegium.Models.Props.Props", "Props")
                        .WithMany()
                        .HasForeignKey("PropsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneSounds.SceneSound", b =>
                {
                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Sounds.Sound", "Sounds")
                        .WithMany()
                        .HasForeignKey("SoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneSpecials.SceneSpecial", b =>
                {
                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.SpecialEffects.SpecialEffect", "SpecialEffect")
                        .WithMany()
                        .HasForeignKey("SpecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneStunts.SceneStunt", b =>
                {
                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Stunts.Stunt", "Stunt")
                        .WithMany()
                        .HasForeignKey("StuntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneVehicle.SceneVehicle", b =>
                {
                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Vehicle.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.SceneVisuals.SceneVisual", b =>
                {
                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.VisualEffects.VisualEffect", "VisualEffect")
                        .WithMany()
                        .HasForeignKey("VisualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.ScenesExtra.ScenesExtra", b =>
                {
                    b.HasOne("Elegium.Models.Extras.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.ScenesandScript.Scene", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ProjectCrews.ProjectUnit", "ProjectUnit")
                        .WithMany()
                        .HasForeignKey("unit");
                });

            modelBuilder.Entity("Elegium.Models.Shots.Shot", b =>
                {
                    b.HasOne("Elegium.Models.ScenesandScript.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ProjectCrews.ProjectUnit", "ProjectUnit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("Elegium.Models.Shots.ShotDetail", b =>
                {
                    b.HasOne("Elegium.Models.Shots.Shot", "Shot")
                        .WithMany()
                        .HasForeignKey("ShotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.Sounds.Sound", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Elegium.Models.SpecialEffects.SpecialEffect", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Elegium.Models.Stunts.Stunt", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Elegium.Models.Talents", b =>
                {
                    b.HasOne("Elegium.Models.Agency.Agency", "agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Elegium.Models.UserAdditionalSkills", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.UserCredit", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.UserEquipment", b =>
                {
                    b.HasOne("Elegium.Models.EquipmentCategory", "EquipmentCategory")
                        .WithMany()
                        .HasForeignKey("EquipmentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.UserFollowing", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "FollowingTo")
                        .WithMany()
                        .HasForeignKey("FollowingToId");

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.UserMessages", b =>
                {
                    b.HasOne("Elegium.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId");

                    b.HasOne("Elegium.Models.ApplicationUser", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId");
                });

            modelBuilder.Entity("Elegium.Models.UserOtherLanguages", b =>
                {
                    b.HasOne("Elegium.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.UserProfile", b =>
                {
                    b.HasOne("Elegium.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Elegium.Models.City", "CompanyCity")
                        .WithMany()
                        .HasForeignKey("CompanyCityId");

                    b.HasOne("Elegium.Models.Country", "CompanyCountry")
                        .WithMany()
                        .HasForeignKey("CompanyCountryId");

                    b.HasOne("Elegium.Models.WorkingPosition", "CompanyPosition")
                        .WithMany()
                        .HasForeignKey("CompanyPositionId");

                    b.HasOne("Elegium.Models.City", "CompanyStudioCity")
                        .WithMany()
                        .HasForeignKey("CompanyStudioCityId");

                    b.HasOne("Elegium.Models.Country", "CompanyStudioCountry")
                        .WithMany()
                        .HasForeignKey("CompanyStudioCountryId");

                    b.HasOne("Elegium.Models.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeId");

                    b.HasOne("Elegium.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Elegium.Models.LanguageLevel", "EnglishLevel")
                        .WithMany()
                        .HasForeignKey("EnglishLevelId");

                    b.HasOne("Elegium.Models.CompanyType", "OwnCompanyType")
                        .WithMany()
                        .HasForeignKey("OwnCompanyTypeId");

                    b.HasOne("Elegium.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");

                    b.HasOne("Elegium.Models.SkillLevel", "SkillLevel")
                        .WithMany()
                        .HasForeignKey("SkillLevelId");

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.UserProjectMenu", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Elegium.Models.MenuActivity", "MenuActivity")
                        .WithMany()
                        .HasForeignKey("MenuActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.UserPromotionCategory", b =>
                {
                    b.HasOne("Elegium.Models.PromotionCategory", "PromotionCategory")
                        .WithMany()
                        .HasForeignKey("PromotionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.Vehicle.Vehicle", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Elegium.Models.VersionFiles", b =>
                {
                    b.HasOne("Elegium.Models.DocumentFiles", "DocumentFile")
                        .WithMany()
                        .HasForeignKey("DocumentFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Elegium.Models.VisualEffects.VisualEffect", b =>
                {
                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Elegium.Models.Voting.FinalVote", b =>
                {
                    b.HasOne("Elegium.Models.Voting.NominationDetail", "NominationDetail")
                        .WithMany()
                        .HasForeignKey("NominationDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "UserVoted")
                        .WithMany()
                        .HasForeignKey("UserVotedId");
                });

            modelBuilder.Entity("Elegium.Models.Voting.FinalVoteDetail", b =>
                {
                    b.HasOne("Elegium.Models.Voting.FinalVote", "FinalVote")
                        .WithMany()
                        .HasForeignKey("FinalVoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Voting.VotingParameter", "VotingParameter")
                        .WithMany()
                        .HasForeignKey("VotingParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.Voting.Nomination", b =>
                {
                    b.HasOne("Elegium.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Elegium.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Elegium.Models.Projects.ProductionType", "ProductionType")
                        .WithMany()
                        .HasForeignKey("ProductionTypeId");
                });

            modelBuilder.Entity("Elegium.Models.Voting.NominationDetail", b =>
                {
                    b.HasOne("Elegium.Models.Voting.Nomination", "Nomination")
                        .WithMany()
                        .HasForeignKey("NominationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elegium.Models.Voting.NominationVote", b =>
                {
                    b.HasOne("Elegium.Models.Voting.NominationDetail", "NominationDetail")
                        .WithMany()
                        .HasForeignKey("NominationDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", "UserVoted")
                        .WithMany()
                        .HasForeignKey("UserVotedId");
                });

            modelBuilder.Entity("Elegium.Models.Voting.NominationVoteDetail", b =>
                {
                    b.HasOne("Elegium.Models.Voting.NominationVote", "NominationVote")
                        .WithMany()
                        .HasForeignKey("NominationVoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.Voting.VotingParameter", "VotingParameter")
                        .WithMany()
                        .HasForeignKey("VotingParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elegium.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Elegium.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
